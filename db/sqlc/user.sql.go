// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  hashed_password,
  full_name,
  email
) VALUES (
  $1, $2, $3, $4
) RETURNING username, hashed_password, full_name, email, password_changed_at, created_at
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	FullName       string `json:"full_name"`
	Email          string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, hashed_password, full_name, email, password_changed_at, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  -- วิธีที่ 1 ในการทำให้ UpdateUser สามารถเลือก update แค่บาง fields ได้
  -- hashed_password = CASE -- CASE นี้ เพื่อจะได้สามารถ update แค่ field ใด field นึงต่อครั้งได้ -- ศึกษาเพิ่มเติมได้ที่ doc ของ sqlc
  --   WHEN @set_hashed_password::boolean = TRUE THEN @hashed_password -- ใส่ sqlc.arg(set_hashed_password)::boolean เพื่อกำหนด name และ type (ถ้าใส่เป็น $1 มันจะกำหนดชื่อให้เอา)เป็น set_hashed_password กับ boolean ซึ่งเขียน sqlc.arg() ย่อได้เป็น @
  --   -- ถ้าไม่กำหนด type (::boolean) ใน go code จะทำให้ parameter นี้กลายเป็น interface{}
  --   -- @hashed_password หลัง THEN คือกำหนดชื่อ parameter เช่นกัน
  --   ELSE hashed_password -- แต่ hashed_password หลัง ELSE นั้นคือ hashed_password column นะ ไม่ใช่การกำหนดชื่อ parameter
  -- END,
  -- full_name = CASE
  --   WHEN @set_full_name::boolean = TRUE THEN @full_name
  --   ELSE full_name
  -- END,
  -- email = CASE
  --   WHEN @set_email::boolean = TRUE THEN @email
  --   ELSE email
  -- END

  -- วิธีที่ 2 : ใช้ COALESCE วิธีที่ 1 (อ่านเพิ่มเติมของ COALESCE ที่ doc ของ sqlc)
  hashed_password = COALESCE($1, hashed_password),
  password_changed_at = COALESCE($2, password_changed_at), -- narg ย่อมาจาก nullable argument
  full_name = COALESCE($3, full_name),
  email = COALESCE($4, email)
WHERE
  username = $5 -- เนื่องจากถ้าเราใช้ @ ใช้การกำหนด parameter เราต้องใช้มันในทุก parameter เลย ทำให้ตรงนี้เราเลยกำหนดเป็น @username ด้วยนั้นเอง
RETURNING username, hashed_password, full_name, email, password_changed_at, created_at
`

type UpdateUserParams struct {
	HashedPassword    sql.NullString `json:"hashed_password"`
	PasswordChangedAt sql.NullTime   `json:"password_changed_at"`
	FullName          sql.NullString `json:"full_name"`
	Email             sql.NullString `json:"email"`
	Username          string         `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.FullName,
		arg.Email,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
